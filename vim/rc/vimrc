if &compatible
  set nocompatible
endif

function! s:source_rc(path, ...) abort "{{{
  let use_global = get(a:000, 0, !has('vim_starting'))
  let abspath = resolve(expand('~/.vim/rc/' . a:path))
  if !use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  " substitute all 'set' to 'setglobal'
  let content = map(readfile(abspath),
        \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute printf('source %s', fnameescape(tempfile))
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction"}}}

let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

call s:source_rc('init.rc.vim')

call dein#begin(s:dein_dir)

let s:toml      = '~/.vim/rc/dein.toml'
let s:toml_lazy = '~/.vim/rc/deinlazy.toml'

" Cache TOML.
if dein#load_cache([expand('<sfile>'), s:toml, s:toml_lazy])
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:toml_lazy, {'lazy': 1})
  call dein#save_cache()
endif

call s:source_rc('plugins.rc.vim')

call dein#end()

if dein#check_install()
  call dein#install()
endif

"---------------------------------------------------------------------------
" Encoding:
"
call s:source_rc('encoding.rc.vim')

"---------------------------------------------------------------------------
" Search:
set ignorecase
set smartcase
set incsearch
set nohlsearch
set wrapscan

"---------------------------------------------------------------------------
" Edit:
"
call s:source_rc('edit.rc.vim')

"---------------------------------------------------------------------------
" View:
"
call s:source_rc('view.rc.vim')

"---------------------------------------------------------------------------
" FileType:
"
call s:source_rc('filetype.rc.vim')

"---------------------------------------------------------------------------
" Mappings:
"

call s:source_rc('mappings.rc.vim')
colorscheme badwolf

set secure
