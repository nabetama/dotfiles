[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['unite.vim', 'vimshell.vim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = 'context_filetype.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  source ~/.vim/rc/plugins/neocomplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  imap <silent>L     <Plug>(neosnippet_jump_or_expand)
  smap <silent>L     <Plug>(neosnippet_jump_or_expand)
  xmap <silent>L     <Plug>(neosnippet_expand_target)
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
on_source = 'denite.nvim'
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_[source = 'source ~/.vim/rc/plugins/denite.rc.vim'


[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_add = 'nnoremap <silent>   [Space]v   :<C-u>VimFiler -invisible<CR>'
hook_source = '''
call vimfiler#custom#profile('default', 'context', {
      \ 'safe' : 0,
      \ 'auto_expand' : 1,
      \ 'parent' : 0,
      \ })
let g:vimfiler_as_default_explorer = 1

" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = ' '
let g:vimfiler_readonly_file_icon = '✗'
let g:vimfiler_marked_file_icon = '✓'
autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
function! s:vimfiler_my_settings() abort "{{{
  nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
endfunction"}}}
'''

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo = 'LeafCage/foldCC'
on_ft = 'vim'

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_source = '''
  let g:ref_cache_dir = expand('$CACHE/ref')
  let g:ref_use_vimproc = 1
  autocmd MyAutoCmd FileType ref call s:ref_my_settings()
  function! s:ref_my_settings() abort "{{{
    " Overwrite settings.
    nmap <buffer> [Tag]t  <Plug>(ref-keyword)
    nmap <buffer> [Tag]p  <Plug>(ref-back)
    nnoremap <buffer> <TAB> <C-w>w
  endfunction"}}}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown', 'mkd']

[[plugins]]
repo  = 'mattn/emmet-vim'
on_ft = ['html', 'htmldjango', 'jinja', 'j2']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'davidhalter/jedi-vim'
if = "!has('nvim')"
on_ft = 'python'
hook_source = '''
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#show_call_signatures = 0
'''

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

