# ------------------------------------
# Functions
# ------------------------------------
# Execute after moving directory
# ディレクトリを移動したら実行する
chpwd() {
    ls_abbrev
    show_git_status
}

# There are too many files to display with ls
# lsで表示するにはファイルが多すぎる
ls_abbrev() {
    # -C : Force multi-column output.
    # -F : Append indicator (one of */=>@|) to entries.
    local cmd_ls='ls'
    local -a opt_ls
    opt_ls=('-CF' '--color=always')
    case "${OSTYPE}" in
        freebsd*|darwin*)
            if type gls > /dev/null 2>&1; then
                cmd_ls='gls'
            else
                # -G : Enable colorized output.
                opt_ls=('-aCFG')
            fi
            ;;
    esac

    local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

    if [ $ls_lines -gt 5 ]; then
        echo "$ls_result" | head -n 3
    else
        echo "$ls_result"
    fi
}

function show_git_status() {
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        git status -sb
    fi
    return 0
}

function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    echo
    ls_abbrev
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        git status -sb
        echo
    fi
    zle reset-prompt
    return 0
}

zle -N do_enter
bindkey '^m' do_enter

# ------------------------------------
# GitHub Issue to Branch Name
# ------------------------------------
# Convert GitHub issue URL to branch name
# Usage: gh-issue-to-branch <github-issue-url>
# Example: gh-issue-to-branch https://github.com/<ORG>/<REPO>/issues/1292
# Output: feature/issue-1292
function gh-issue-to-branch() {
    if [ -z "$1" ]; then
        echo "Usage: gh-issue-to-branch <github-issue-url>" >&2
        return 1
    fi

    local url="$1"

    # Extract issue number from GitHub URL
    # Supports formats:
    # - https://github.com/owner/repo/issues/1292
    # - http://github.com/owner/repo/issues/1292
    # - github.com/owner/repo/issues/1292
    local issue_number=$(echo "$url" | sed -E 's#.*github\.com/[^/]+/[^/]+/issues/([0-9]+).*#\1#')

    if [ -z "$issue_number" ] || [ "$issue_number" = "$url" ]; then
        echo "Error: Invalid GitHub issue URL" >&2
        return 1
    fi

    echo "feature/issue-${issue_number}"
}

# ------------------------------------
# Create Git Branch
# ------------------------------------
# Create a git branch with the given name
# Usage: gh-create-branch <branch-name>
#        echo <branch-name> | gh-create-branch
# Example: gh-create-branch feature/issue-1292
#          gh-issue-to-branch https://github.com/owner/repo/issues/1292 | gh-create-branch
function gh-create-branch() {
    local branch_name

    # Read from argument or stdin
    if [ -n "$1" ]; then
        branch_name="$1"
    else
        read branch_name
    fi

    if [ -z "$branch_name" ]; then
        echo "Usage: gh-create-branch <branch-name>" >&2
        echo "       echo <branch-name> | gh-create-branch" >&2
        return 1
    fi

    # Check if we're in a git repository
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository" >&2
        return 1
    fi

    # Create and checkout the branch
    git checkout -b "$branch_name"
}
